<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var url = "http://astromath.informaticapucv.cl/curl_con.php";
http_get(url);
menu_x=room_width/2; 
menu_y=room_height/2;
instance_create(menu_x,menu_y-100,obj_loading_gif);
go_to_next = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(go_to_next){
    instance_destroy(obj_loading_gif);
    room_goto(rm_space);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var json = async_load[? "result"]
show_debug_message(json);
var map = json_decode(json);

if(map = -1){
    show_debug_message("Invalid result");
}

if(ds_exists(map,ds_type_map)){
    show_debug_message("Es mapa");
    /* POR REVISAR: En este if se podrían poner los demás que vienen abajo
    En definitiva, sólo si hay un mapa correcto se debería hacer todo lo demás y cambiar
    la condición que señala que se puede avanzar a la siguietne room (go_to_next);
    */
}

if(ds_map_exists(map, "menorMultiplo")){
    var menorMultiplo = map[? "menorMultiplo"];
     show_debug_message("menorMultiplo funciona");
     show_debug_message(menorMultiplo);
     global.minA = real(menorMultiplo);
}

if(ds_map_exists(map, "mayorMultiplo")){
    var mayorMultiplo = map[? "mayorMultiplo"];
     show_debug_message("mayorMultiplo funciona");
     show_debug_message(mayorMultiplo);
     global.maxB = real(mayorMultiplo);
}

if(ds_map_exists(map, "rondas")){
    var rondas = map[? "rondas"];
    show_debug_message("rondas funciona");
    show_debug_message(ds_list_size(rondas));
    for(i = 0; i &lt; ds_list_size(rondas); i++){
        show_debug_message(rondas[| i]);
        array = explode(",", rondas[| i]);
        
        global.eFacil[i] = real(array[0]);
        global.eMedio[i] = real(array[1]);
        global.eDificil[i] = real(array[2]);
        /*
        for(j = 0; j&lt;array_length_1d(array);j++)
            show_debug_message(array[j]);   
        */
    }
    global.sets = ds_list_size(rondas);
}
if(ds_map_exists(map, "min_vel")){
    var min_vel = map[? "min_vel"];
     show_debug_message("min_vel funciona");
     show_debug_message(min_vel);
     global.min_vel = real(min_vel);
}
if(ds_map_exists(map, "max_vel")){
    var max_vel = map[? "max_vel"];
     show_debug_message("max_vel funciona");
     show_debug_message(max_vel);
     global.max_vel = real(max_vel);
}
if(ds_map_exists(map, "acel")){
    var acel = map[? "acel"];
     show_debug_message("acel funciona");
     show_debug_message(acel);
     global.acel = real(acel);
}
if(ds_map_exists(map, "modo")){
    var modo_juego = map[? "modo"];
    show_debug_message("Modo de juego funciona");
    show_debug_message(modo_juego);
    global.modo_juego = real(modo_juego);
}
if(ds_map_exists(map, "epe")){
    var n_ejercicios = map[? "epe"];
    show_debug_message("N ejercicios de juego funciona");
    show_debug_message(n_ejercicios);
    global.N = real(n_ejercicios);
}
if(ds_map_exists(map, "operaciones")){
    var str_operaciones = map[? "operaciones"];
    show_debug_message("Operaciones en juego funciona");
    show_debug_message(str_operaciones);
    global.operaciones = str_operaciones;
}

if(ds_map_exists(map, "maxSuma")){
    var maxSuma = map[? "maxSuma"];
     show_debug_message("maxSuma funciona");
     show_debug_message(maxSuma);
     global.maxSuma = real(maxSuma);
}
if(ds_map_exists(map, "minResta")){
    var minResta = map[? "minResta"];
     show_debug_message("minResta funciona");
     show_debug_message(minResta);
     global.minResta = real(minResta);
}
if(ds_map_exists(map, "minAS")){
    var minAS = map[? "minAS"];
     show_debug_message("minAS funciona");
     show_debug_message(minAS);
     global.minAS = real(minAS);
}
if(ds_map_exists(map, "maxBS")){
    var maxBS = map[? "maxBS"];
     show_debug_message("maxBS funciona");
     show_debug_message(maxBS);
     global.maxBS = real(maxBS);
}
if(ds_map_exists(map, "minAR")){
    var minAR = map[? "minAR"];
     show_debug_message("minAR funciona");
     show_debug_message(minAR);
     global.minAR = real(minAR);
}
if(ds_map_exists(map, "maxBR")){
    var maxBR = map[? "maxBR"];
     show_debug_message("maxBR funciona");
     show_debug_message(maxBR);
     global.maxBR = real(maxBR);
}
if(ds_map_exists(map, "minAD")){
    var minAD = map[? "minAD"];
     show_debug_message("minAD funciona");
     show_debug_message(minAD);
     global.minAD = real(minAD);
}
if(ds_map_exists(map, "maxBD")){
    var maxBD = map[? "maxBD"];
     show_debug_message("maxBD funciona");
     show_debug_message(maxBD);
     global.maxBD = real(maxBD);
}
if(ds_map_exists(map, "porcDig")){
    var porcDig = map[? "porcDig"];
    show_debug_message("porcDig funciona");
    show_debug_message(porcDig);
    global.porcDig = real(porcDig);
}
if(ds_map_exists(map, "restoD")){
    var restoD = real(map[? "restoD"]);
     show_debug_message("restoD funciona");
     show_debug_message(restoD);
     if(restoD == 0)
        global.restoD = false;
     else
        global.restoD = true;
}
if(ds_map_exists(map, "canjeR")){
    var canjeR = real(map[? "canjeR"]);
     show_debug_message("canjeR funciona");
     show_debug_message(canjeR);
     if(canjeR == 0)
        global.canjeR = false;
     else
        global.canjeR = true;
}
if(ds_map_exists(map, "canjeS")){
    var canjeS = real(map[? "canjeS"]);
     show_debug_message("canjeS funciona");
     show_debug_message(canjeS);
     if(canjeS == 0)
        global.canjeS = false;
     else
        global.canjeS = true;
}
if(ds_map_exists(map, "p_adapt_vel")){
    var p_adapt_vel = map[? "p_adapt_vel"];
     show_debug_message("p_adapt_vel funciona");
     show_debug_message(p_adapt_vel);
     global.p_adapt_vel = p_adapt_vel;
}
if(ds_map_exists(map, "debug")){
    var debug = real(map[? "debug"]);
     show_debug_message("debug funciona");
     show_debug_message(debug);
     if(debug == 0)
        global.debug = false;
     else
        global.debug = true;
}


go_to_next = true;
global.loaded = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_font(font_loading);
draw_set_colour(c_white);
texto_menu = "CARGANDO";
draw_text(menu_x, menu_y, texto_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
