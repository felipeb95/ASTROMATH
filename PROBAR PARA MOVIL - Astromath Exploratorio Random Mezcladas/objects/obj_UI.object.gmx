<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>joystick_x = 70;
joystick_y = 320;

joystick_mx = 0;
joystick_my = 0;

joystick_active = false;
right_finger = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for( i = 0;i &lt; 4; i++)
{
        if(device_mouse_check_button(i,mb_any))
        {
            if(point_in_rectangle(device_mouse_x(i),device_mouse_y(i),0,0,room_width/2,room_height))
            {
            var mx = device_mouse_x(i); 
            var my = device_mouse_y(i);
                
            if(!joystick_active)
            {
                if(mx &lt;= room_width/2 &amp;&amp; y &gt;= room_height/2){
                    joystick_x = mx;
                    joystick_y = my;
                }
                    joystick_active = true;
                } else {
                    var joystick_angle = point_direction(joystick_x,joystick_y,mx,my);
                    var distance = point_distance(joystick_x,joystick_y,mx,my);
                    
                    joystick_mx = dcos(joystick_angle) * min(50,distance);
                    joystick_my = -dsin(joystick_angle) * min(50,distance);
                }
            }
        } 
        else {
            joystick_active = false;
            joystick_mx = 0;
            joystick_my = 0;
        }
        
    if(device_mouse_check_button_released(i,mb_any))
    {
        if(point_in_rectangle(device_mouse_x(i),device_mouse_y(i),room_width/2,0,room_width,room_height)){
            instance_create(obj_ship.x,obj_ship.y,obj_bullet);
        }
    }

}
obj_ship.x += (joystick_mx / 50) * obj_ship.spd;
obj_ship.y += (joystick_my / 50) * obj_ship.spd;
*/

if(device_mouse_check_button(0,mb_left))
{
    if(point_in_rectangle(device_mouse_x(0),device_mouse_y(0),0,0,room_width/2,room_height))
    {
    right_finger = 1;
    var mx = device_mouse_x(0); 
    var my = device_mouse_y(0);
                
    if(!joystick_active)
    {
        if(mx &lt;= room_width/2 &amp;&amp; y &gt;= room_height/2){
            joystick_x = mx;
            joystick_y = my;
        }
        joystick_active = true;
    } else {
        var joystick_angle = point_direction(joystick_x,joystick_y,mx,my);
        var distance = point_distance(joystick_x,joystick_y,mx,my);
                    
        joystick_mx = dcos(joystick_angle) * min(50,distance);
        joystick_my = -dsin(joystick_angle) * min(50,distance);
    }
    
    }
} 
else {
    joystick_active = false;
    joystick_mx = 0;
    joystick_my = 0;
    right_finger = 0;
}

if(device_mouse_check_button_released(right_finger,mb_any))
{
    if(point_in_rectangle(device_mouse_x(right_finger),device_mouse_y(right_finger),room_width/2,0,room_width,room_height)){
        instance_create(obj_ship.x,obj_ship.y,obj_bullet);
    }
}



obj_ship.x += (joystick_mx / 50) * obj_ship.spd;
obj_ship.y += (joystick_my / 50) * obj_ship.spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_joystick,0,joystick_x,joystick_y);
draw_sprite(spr_joystick,1,joystick_x + joystick_mx,joystick_y+joystick_my);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
