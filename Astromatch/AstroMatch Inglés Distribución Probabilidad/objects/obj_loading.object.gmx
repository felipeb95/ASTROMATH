<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>url = "http://astromatch.informaticapucv.cl/curl_astromatch_experimental.php";
//url = "http://localhost/curl_astromatch_experimental.php";
http_get(url);

global.list = ds_list_create();
global.backup_list = ds_list_create();
global.sprites_list = ds_list_create();
menu_x=room_width/2; 
menu_y=room_height/2;
instance_create(menu_x,menu_y-100,obj_loading_gif);
go_to_next = false;

global.pNuevas = undefined;
global.pBuenas = undefined;
global.pMalas = undefined;

global.tl = undefined; // Total Levels (tl)
global.ipl = undefined; // Items Per Level (ipl)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(go_to_next){

    show_debug_message("----- LISTA DE LECTURA -----");
    show_list(global.list);
    show_debug_message("----- FIN LISTA DE LECTURA-----");
    show_debug_message(" ");
    
    instance_destroy(obj_loading_gif);
    go_to_next = false;

    show_debug_message("----- LISTA DE RESPALDO-----");
    ds_list_copy(global.backup_list,global.list);
    show_list(global.backup_list);
    show_debug_message("----- FIN LISTA DE RESPALDO-----");
    show_debug_message(" ");
    
    global.ipl = items_per_level_counter(global.backup_list);
    global.tl = array_length_1d(global.ipl);
    str_levels = "Cantidad de niveles: " + string(global.tl);
    show_debug_message(str_levels);
    
    for(i = 0; i &lt; global.tl ; i++){
        str_ipl = "Items en nivel "+string(i+1)+": "+string(global.ipl[i]);
        show_debug_message(str_ipl);
    }
    
    room_goto(rm_space);
    global.snd=audio_play_sound(music,10,true);
    audio_sound_gain(global.snd,0.4,0);
    
    /* La siguiente línea envía a otra pantalla de carga en la que se crean
    canales de audio para las url que se han guardado en la lista con la key 'audio'.
    De momento no está porque la función con la que descarga los audios no es soportada
    por HTML y en versión nativa se reproduce el mismo sonido siempre independientemente
    de la palabra que salió*/
    //room_goto(rm_loading_next);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var json = async_load[? "result"]
//show_debug_message(json);
var mapaLectura = json_decode(json);
var items = undefined;
largo_mapaLectura = ds_map_size(mapaLectura);
if(ds_map_exists(mapaLectura,"items")){
    items = ds_map_find_value(mapaLectura,"items");
    for(i = 1; i &lt;= items; i++){
        if(ds_map_exists(mapaLectura, string(i))){
            var miniMap = mapaLectura[? string(i)];
            var url_imagen = ds_map_find_value(miniMap, "url");
            var etapa = ds_map_find_value(miniMap, "etapa");
            var url_audio = ds_map_find_value(miniMap, "audio");
            if(ds_map_exists(miniMap,"alternativas")){
                var alternativas = miniMap[? "alternativas"];
                var index = 0;
                var array = undefined;
                for(j = 0; j &lt; ds_list_size(alternativas);j++){
                    array[index] = alternativas[| j];
                    index++;
                }              
            }  
            var correcta = ds_map_find_value(miniMap, "correcta");
            //stream_audio = audio_create_stream(url_audio)
            downloaded = sprite_add(url_imagen,0,false,false,64,64);
            ds_list_add(global.sprites_list,downloaded);
            tempMap = ds_map_create();
            ds_map_add(tempMap,"url",url_imagen);
            ds_map_add(tempMap,"alternativas",array);
            ds_map_add(tempMap,"correcta",correcta);
            ds_map_add(tempMap,"sprite",downloaded);
            ds_map_add(tempMap,"audio",url_audio);
            ds_map_add(tempMap,"etapa",etapa);
            //ds_map_add(tempMap,"audio",stream_audio);
            
            var copy = ds_map_create();
            ds_map_copy(copy,tempMap);
            
            var json_mapa = json_encode(copy);
            show_debug_message(json_mapa);
            ds_list_add(global.list,copy);
        }
    }
}
if(ds_map_exists(mapaLectura,"pBuenas"))
    global.pBuenas = mapaLectura[? "pBuenas"];
if(ds_map_exists(mapaLectura,"pMalas"))
    global.pMalas = mapaLectura[? "pMalas"];
if(ds_map_exists(mapaLectura,"pNuevas"))
    global.pNuevas = mapaLectura[? "pNuevas"];

str_prob = "Prob buenas: "+string(global.pBuenas)+
    " | Prob malas: "+string(global.pMalas)+
    " | Prob nuevas: "+string(global.pNuevas);
if(ds_map_exists(mapaLectura,"carril"))
    global.carril = real(mapaLectura[? "carril"]);
if(ds_map_exists(mapaLectura,"min_vel"))
    global.min_vel = real(mapaLectura[? "min_vel"]);
if(ds_map_exists(mapaLectura,"max_vel"))
    global.max_vel = real(mapaLectura[? "max_vel"]);
if(ds_map_exists(mapaLectura,"acel"))
    global.acel = real(mapaLectura[? "acel"]);

str_vel = "Velocidad mínima: "+string(global.min_vel)+
    " | Velocidad máxima: "+string(global.max_vel)+
    " | Aceleración: "+string(global.acel);

show_debug_message(" ");    
show_debug_message(str_prob);
show_debug_message(str_vel);
show_debug_message(" "); 
    
go_to_next = true;
global.loaded = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "id") == downloaded
{
    if ds_map_find_value(async_load, "status") &gt;= 0
    {
    sprite_index = downloaded
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_font(font_loading);
draw_set_colour(c_white);
texto_menu = "Cargando visuales";
draw_text(menu_x, menu_y, texto_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
