<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var url = "http://localhost:8888/public_html/curl2.php";
http_get(url);
menu_x=room_width/2; 
menu_y=room_height/2;
instance_create(menu_x,menu_y-100,obj_loading_gif);
go_to_next = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(go_to_next){
    instance_destroy(obj_loading_gif);
    room_goto(rm_simulacion);
    global.snd=audio_play_sound(music,10,true);
    audio_sound_gain(global.snd,0.4,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var json = async_load[? "result"]
show_debug_message(json);
var map = json_decode(json);

if(map = -1){
    show_debug_message("Invalid result");
}

if(ds_exists(map,ds_type_map)){
    show_debug_message("Es mapa");
    /* POR REVISAR: En este if se podrían poner los demás que vienen abajo
    En definitiva, sólo si hay un mapa correcto se debería hacer todo lo demás y cambiar
    la condición que señala que se puede avanzar a la siguietne room (go_to_next);
    */
}

if(ds_map_exists(map, "menorMultiplo")){
    var menorMultiplo = map[? "menorMultiplo"];
     show_debug_message("menorMultiplo funciona");
     show_debug_message(menorMultiplo);
     global.minA = real(menorMultiplo);
}

if(ds_map_exists(map, "mayorMultiplo")){
    var mayorMultiplo = map[? "mayorMultiplo"];
     show_debug_message("mayorMultiplo funciona");
     show_debug_message(mayorMultiplo);
     global.maxB = real(mayorMultiplo);
}

if(ds_map_exists(map, "porcBuenas")){
    var nBuenas = map[? "porcBuenas"];
     show_debug_message("nBuenas funciona");
     show_debug_message(nBuenas);
     global.nBuenas = nBuenas;
}

if(ds_map_exists(map, "porcMalas")){
    var nMalas = map[? "porcMalas"];
     show_debug_message("nMalas funciona");
     show_debug_message(nMalas);
     global.nMalas = nMalas;
}

if(ds_map_exists(map, "setMemoria")){
    var setMemoria = map[? "setMemoria"];
     show_debug_message("setMemoria funciona");
     show_debug_message(setMemoria);
     global.setMemoria = real(setMemoria);
}

if(ds_map_exists(map, "rondas")){
    var rondas = map[? "rondas"];
    show_debug_message("rondas funciona");
    show_debug_message(ds_list_size(rondas));
    for(i = 0; i &lt; ds_list_size(rondas); i++){
        show_debug_message(rondas[| i]);
        array = explode(",", rondas[| i]);
        
        global.eFacil[i] = real(array[0]);
        global.eMedio[i] = real(array[1]);
        global.eDificil[i] = real(array[2]);
        /*
        for(j = 0; j&lt;array_length_1d(array);j++)
            show_debug_message(array[j]);   
        */
    }
    global.sets = ds_list_size(rondas);
}
go_to_next = true;
global.loaded = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_font(font_loading);
draw_set_colour(c_white);
texto_menu = "CARGANDO";
draw_text(menu_x, menu_y, texto_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
