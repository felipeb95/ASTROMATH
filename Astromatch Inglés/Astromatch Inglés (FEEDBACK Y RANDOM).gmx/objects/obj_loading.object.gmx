<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>url = "http://localhost/ca.php";
http_get(url);

global.list = ds_list_create();
global.sprites_list = ds_list_create();
menu_x=room_width/2; 
menu_y=room_height/2;
instance_create(menu_x,menu_y-100,obj_loading_gif);
go_to_next = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(go_to_next){

    show_debug_message("##########################");
    show_debug_message("##########################");
    show_debug_message("##########################");
    
    for(index = 0; index &lt; ds_list_size(global.list); index++){
        palabra_sorteada = ds_map_find_value(global.list[| index],"correcta");
        imagen_url_palabra = ds_map_find_value(global.list[| index],"url");
        alternativas = ds_map_find_value(global.list[| index],"alternativas");
        show_debug_message("--- URL IMAGEN ---");
        show_debug_message(imagen_url_palabra);
        show_debug_message("--- ALTERNATIVAS ---");
        show_debug_message(alternativas[0]);
        show_debug_message(alternativas[1]);
        show_debug_message(alternativas[2]);
        show_debug_message(alternativas[3]);
        show_debug_message(alternativas[4]);
        show_debug_message("--- CORRECTA ---");
        show_debug_message(palabra_sorteada);
    }
    show_debug_message("* * * * * * * * * * * * * * * * ");
    for(index = 0;index &lt; ds_list_size(global.sprites_list);index++){
        show_debug_message("--- POSICIÃ“N ---");
        show_debug_message(index);
        show_debug_message("--- SPRITE ASIGNADO ---");
        sprite_asignado = ds_list_find_value(global.sprites_list,index);
        show_debug_message(sprite_asignado);
    }
    
    show_debug_message("##########################");


    instance_destroy(obj_loading_gif);
    room_goto(rm_space);
    global.snd=audio_play_sound(music,10,true);
    audio_sound_gain(global.snd,0.4,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var json = async_load[? "result"]
//show_debug_message(json);
show_debug_message("INICIO LECTURA");
var mapaLectura = json_decode(json);
largo_mapaLectura = ds_map_size(mapaLectura);

for(i = 1; i &lt;= largo_mapaLectura; i++){
    if(ds_map_exists(mapaLectura, string(i))){
        var miniMap = mapaLectura[? string(i)];
        show_debug_message(json_encode(miniMap));
        show_debug_message("--- URL ---");
        var url_imagen = ds_map_find_value(miniMap, "url");
        show_debug_message(url_imagen);
        show_debug_message("--- ALTERNATIVAS ---");
        
        if(ds_map_exists(miniMap,"alternativas")){
            var alternativas = miniMap[? "alternativas"];
            var index = 0;
            var array = undefined;
            for(j = 0; j &lt; ds_list_size(alternativas);j++){
                array[index] = alternativas[| j];
                index++;
            }
            for(k = 0; k &lt; array_length_1d(array);k++)
                show_debug_message(array[k]);     
               
        }  
        show_debug_message("--- CORRECTA ---");
        var correcta = ds_map_find_value(miniMap, "correcta");
        show_debug_message(correcta);
    }
    downloaded = sprite_add(url_imagen,0,false,false,64,64);
    ds_list_add(global.sprites_list,downloaded);
    show_debug_message("--- SPRITE ASIGNADO ---");
    show_debug_message(downloaded);
    tempMap = ds_map_create();
    ds_map_add(tempMap,"url",url_imagen);
    ds_map_add(tempMap,"alternativas",array);
    ds_map_add(tempMap,"correcta",correcta);
    var copy = ds_map_create();
    ds_map_copy(copy,tempMap);
    
    show_debug_message("--- JSON MINI MAP ---");
    var json_mapa = json_encode(copy);
    show_debug_message(json_mapa);
    show_debug_message("######################################");
    ds_list_add(global.list,copy);
}
go_to_next = true;
global.loaded = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "id") == downloaded
{
    if ds_map_find_value(async_load, "status") &gt;= 0
    {
    sprite_index = downloaded
    }
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_font(font_loading);
draw_set_colour(c_white);
texto_menu = "CARGANDO";
draw_text(menu_x, menu_y, texto_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
